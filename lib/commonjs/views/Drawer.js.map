{"version":3,"names":["Clock","Value","onChange","clockRunning","startClock","stopClock","interpolateNode","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","Animated","TRUE","FALSE","NOOP","UNSET","PROGRESS_EPSILON","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_THRESHOLD_DEFAULT","SWIPE_DISTANCE_MINIMUM","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","Drawer","React","PureComponent","props","drawerType","open","State","UNDETERMINED","drawerPosition","isDrawerTypeFront","touchX","gestureX","drawerWidth","containerWidth","swipeDistanceThreshold","undefined","swipeVelocityThreshold","isOpen","toValue","frameTime","state","position","time","finished","velocity","clock","velocityX","manuallyTriggerSpring","offsetX","value","Boolean","toggleDrawer","currentOpenValue","onOpen","onClose","pendingOpenValue","forceUpdate","nextIsOpen","isSwiping","keyboardDismissMode","Keyboard","dismiss","toggleStatusBar","gestureState","ACTIVE","touchDistanceFromDrawer","transitionTo","dragX","translateX","nativeEvent","x","translationX","s","oldState","e","setValue","layout","width","requestAnimationFrame","drawerOpacity","hidden","hideStatusBar","statusBarAnimation","isStatusBarHidden","StatusBar","setHidden","componentDidUpdate","prevProps","componentWillUnmount","render","gestureEnabled","swipeEdgeWidth","sceneContainerStyle","drawerStyle","overlayStyle","onGestureRef","renderDrawerContent","renderSceneContent","gestureHandlerProps","right","contentTranslateX","drawerTranslateX","I18nManager","isRTL","offset","hitSlop","left","progress","handleGestureEvent","handleGestureStateChange","handleContainerLayout","styles","main","content","transform","handleTapStateChange","overlay","opacity","inputRange","outputRange","zIndex","Platform","OS","handleDrawerLayout","container","drawerPostion","StyleSheet","create","backgroundColor","top","bottom","maxWidth","absoluteFillObject","flex","overflow"],"sources":["Drawer.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  ViewStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n  Keyboard,\n  StatusBar,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  TapGestureHandler,\n  State,\n} from 'react-native-gesture-handler';\nimport Animated from 'react-native-reanimated';\nimport DrawerProgressContext from '../utils/DrawerProgressContext';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  interpolateNode,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst PROGRESS_EPSILON = 0.05;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\ntype Binary = 0 | 1;\n\ntype Renderer = (props: { progress: Animated.Node<number> }) => React.ReactNode;\n\ntype Props = {\n  open: boolean;\n  onOpen: () => void;\n  onClose: () => void;\n  onGestureRef?: (ref: PanGestureHandler | null) => void;\n  gestureEnabled: boolean;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide';\n  keyboardDismissMode: 'none' | 'on-drag';\n  swipeEdgeWidth: number;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold: number;\n  hideStatusBar: boolean;\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  overlayStyle?: ViewStyle;\n  drawerStyle?: ViewStyle;\n  sceneContainerStyle?: ViewStyle;\n  renderDrawerContent: Renderer;\n  renderSceneContent: Renderer;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n};\n\nexport default class Drawer extends React.PureComponent<Props> {\n  static defaultProps = {\n    gestureEnabled: true,\n    drawerPostion: I18nManager.isRTL ? 'left' : 'right',\n    drawerType: 'front',\n    swipeEdgeWidth: 32,\n    swipeVelocityThreshold: 500,\n    keyboardDismissMode: 'on-drag',\n    hideStatusBar: false,\n    statusBarAnimation: 'slide',\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBar,\n    } = this.props;\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(\n        swipeDistanceThreshold !== undefined\n          ? swipeDistanceThreshold\n          : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n      );\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n  }\n\n  private clock = new Clock();\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private gestureState = new Value<number>(State.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(0);\n\n  private containerWidth = new Value<number>(0);\n  private drawerWidth = new Value<number>(0);\n  private drawerOpacity = new Value<number>(0);\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold !== undefined\n      ? this.props.swipeDistanceThreshold\n      : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    cond(\n      eq(this.gestureState, State.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleTapStateChange = event([\n    {\n      nativeEvent: {\n        oldState: (s: Animated.Value<number>) =>\n          cond(eq(s, State.ACTIVE), set(this.manuallyTriggerSpring, TRUE)),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBar, statusBarAnimation } = this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      gestureEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      sceneContainerStyle,\n      drawerStyle,\n      overlayStyle,\n      onGestureRef,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const right = drawerPosition === 'right';\n\n    const contentTranslateX = drawerType === 'front' ? 0 : this.translateX;\n    const drawerTranslateX =\n      drawerType === 'back'\n        ? I18nManager.isRTL\n          ? multiply(this.drawerWidth, DIRECTION_RIGHT)\n          : this.drawerWidth\n        : this.translateX;\n\n    const offset = I18nManager.isRTL ? '100%' : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/kmagiera/react-native-gesture-handler/issues/569\n    const hitSlop = right\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: open ? undefined : swipeEdgeWidth }\n      : { left: 0, width: open ? undefined : swipeEdgeWidth };\n\n    return (\n      <DrawerProgressContext.Provider value={this.progress}>\n        <PanGestureHandler\n          ref={onGestureRef}\n          activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n          onGestureEvent={this.handleGestureEvent}\n          onHandlerStateChange={this.handleGestureStateChange}\n          hitSlop={hitSlop}\n          enabled={gestureEnabled}\n          {...gestureHandlerProps}\n        >\n          <Animated.View\n            onLayout={this.handleContainerLayout}\n            style={styles.main}\n          >\n            <Animated.View\n              style={[\n                styles.content,\n                {\n                  transform: [{ translateX: contentTranslateX }],\n                },\n                sceneContainerStyle as any,\n              ]}\n              importantForAccessibility={open ? 'no-hide-descendants' : 'yes'}\n            >\n              {renderSceneContent({ progress: this.progress })}\n              <TapGestureHandler\n                enabled={gestureEnabled}\n                onHandlerStateChange={this.handleTapStateChange}\n              >\n                <Animated.View\n                  style={[\n                    styles.overlay,\n                    {\n                      opacity: interpolateNode(this.progress, {\n                        inputRange: [PROGRESS_EPSILON, 1],\n                        outputRange: [0, 1],\n                      }),\n                      // We don't want the user to be able to press through the overlay when drawer is open\n                      // One approach is to adjust the pointerEvents based on the progress\n                      // But we can also send the overlay behind the screen, which works, and is much less code\n                      zIndex: cond(\n                        greaterThan(this.progress, PROGRESS_EPSILON),\n                        0,\n                        -1\n                      ),\n                    },\n                    overlayStyle,\n                  ]}\n                />\n              </TapGestureHandler>\n            </Animated.View>\n            <Animated.Code\n              exec={block([\n                onChange(this.manuallyTriggerSpring, [\n                  cond(eq(this.manuallyTriggerSpring, TRUE), [\n                    set(this.nextIsOpen, FALSE),\n                    call([], () => (this.currentOpenValue = false)),\n                  ]),\n                ]),\n              ])}\n            />\n            <Animated.View\n              accessibilityViewIsModal={open}\n              removeClippedSubviews={Platform.OS !== 'ios'}\n              onLayout={this.handleDrawerLayout}\n              style={[\n                styles.container,\n                right ? { right: offset } : { left: offset },\n                {\n                  transform: [{ translateX: drawerTranslateX }],\n                  opacity: this.drawerOpacity,\n                  zIndex: drawerType === 'back' ? -1 : 0,\n                },\n                drawerStyle as any,\n              ]}\n            >\n              {renderDrawerContent({ progress: this.progress })}\n            </Animated.View>\n          </Animated.View>\n        </PanGestureHandler>\n      </DrawerProgressContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: '80%',\n    maxWidth: '100%',\n  },\n  overlay: {\n    ...StyleSheet.absoluteFillObject,\n    backgroundColor: 'rgba(0, 0, 0, 0.5)',\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    overflow: 'hidden',\n  },\n});\n"],"mappings":"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"}