{"version":3,"names":["DrawerView","React","PureComponent","loaded","props","navigation","state","index","drawerWidth","navigationConfig","createRef","descriptors","activeKey","routes","key","drawerLockMode","options","dispatch","DrawerActions","openDrawer","closeDrawer","setState","progress","screenProps","lazy","detachInactiveScreens","unmountInactiveRoutes","descriptor","getComponent","enabled","screensEnabled","styles","content","map","route","includes","isFocused","StyleSheet","absoluteFill","opacity","ref","drawerGestureRef","current","getDerivedStateFromProps","nextProps","prevState","componentDidMount","getLockMode","handleDrawerOpen","Dimensions","addEventListener","updateWidth","componentDidUpdate","prevProps","prevLockMode","nextLockMode","handleDrawerClose","componentWillUnmount","removeEventListener","getDrawerBackgroundColor","drawerBackgroundColor","context","ThemeColors","bodyContent","getOverlayColor","overlayColor","render","drawerType","sceneContainerStyle","edgeWidth","minSwipeDistance","hideStatusBar","statusBarAnimation","gestureHandlerProps","isDrawerOpen","setDrawerGestureRef","drawerPosition","backgroundColor","width","renderNavigationView","renderContent","ThemeContext","create","flex"],"sources":["DrawerView.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Dimensions, StyleSheet, ViewStyle } from 'react-native';\nimport {\n  SceneView,\n  ThemeColors,\n  ThemeContext,\n  NavigationScreenProp,\n} from 'react-navigation';\nimport { ScreenContainer, screensEnabled } from 'react-native-screens';\n\nimport * as DrawerActions from '../routers/DrawerActions';\nimport DrawerSidebar from './DrawerSidebar';\nimport DrawerGestureContext from '../utils/DrawerGestureContext';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport Drawer from './Drawer';\nimport {\n  NavigationDrawerState,\n  DrawerContentComponentProps,\n  SceneDescriptorMap,\n} from '../types';\nimport { PanGestureHandler } from 'react-native-gesture-handler';\n\ntype DrawerOptions = {\n  drawerBackgroundColor?: string;\n  overlayColor?: string;\n  minSwipeDistance?: number;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide';\n  drawerLockMode?: 'unlocked' | 'locked-closed' | 'locked-open';\n  keyboardDismissMode?: 'on-drag' | 'none';\n  drawerWidth: number | (() => number);\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  onDrawerClose?: () => void;\n  onDrawerOpen?: () => void;\n  sceneContainerStyle?: ViewStyle;\n  edgeWidth: number;\n  hideStatusBar?: boolean;\n  style?: ViewStyle;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n};\n\ntype Props = {\n  lazy: boolean;\n  navigation: NavigationScreenProp<NavigationDrawerState>;\n  descriptors: SceneDescriptorMap;\n  navigationConfig: DrawerOptions & {\n    contentComponent?: React.ComponentType<DrawerContentComponentProps>;\n    unmountInactiveRoutes?: boolean;\n    contentOptions?: object;\n  };\n  screenProps: unknown;\n  detachInactiveScreens: boolean;\n};\n\ntype State = {\n  loaded: number[];\n  drawerWidth: number;\n};\n\n/**\n * Component that renders the drawer.\n */\nexport default class DrawerView extends React.PureComponent<Props, State> {\n  // eslint-disable-next-line react/sort-comp\n  static contextType = ThemeContext;\n  static defaultProps = {\n    lazy: true,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    const { index } = nextProps.navigation.state;\n\n    return {\n      // Set the current tab to be loaded if it was not loaded before\n      loaded: prevState.loaded.includes(index)\n        ? prevState.loaded\n        : [...prevState.loaded, index],\n    };\n  }\n\n  state: State = {\n    loaded: [this.props.navigation.state.index],\n    drawerWidth:\n      typeof this.props.navigationConfig.drawerWidth === 'function'\n        ? this.props.navigationConfig.drawerWidth()\n        : this.props.navigationConfig.drawerWidth,\n  };\n\n  componentDidMount() {\n    // If drawerLockMode was set to `locked-open`, we should open the drawer on mount\n    if (this.getLockMode(this.props) === 'locked-open') {\n      this.handleDrawerOpen();\n    }\n\n    Dimensions.addEventListener('change', this.updateWidth);\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const prevLockMode = this.getLockMode(prevProps);\n    const nextLockMode = this.getLockMode(this.props);\n\n    if (prevLockMode !== nextLockMode) {\n      if (nextLockMode === 'locked-open') {\n        this.handleDrawerOpen();\n      } else {\n        this.handleDrawerClose();\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    Dimensions.removeEventListener('change', this.updateWidth);\n  }\n\n  context!: React.ContextType<typeof ThemeContext>;\n\n  private drawerGestureRef = React.createRef<PanGestureHandler>();\n\n  private getLockMode = ({ navigation, descriptors }: Props) => {\n    const activeKey = navigation.state.routes[navigation.state.index].key;\n    const { drawerLockMode } = descriptors[activeKey].options;\n\n    return drawerLockMode;\n  };\n\n  private handleDrawerOpen = () => {\n    const { navigation } = this.props;\n\n    navigation.dispatch(\n      DrawerActions.openDrawer({\n        key: navigation.state.key,\n      })\n    );\n  };\n\n  private handleDrawerClose = () => {\n    const { navigation } = this.props;\n\n    navigation.dispatch(\n      DrawerActions.closeDrawer({\n        key: navigation.state.key,\n      })\n    );\n  };\n\n  private updateWidth = () => {\n    const drawerWidth =\n      typeof this.props.navigationConfig.drawerWidth === 'function'\n        ? this.props.navigationConfig.drawerWidth()\n        : this.props.navigationConfig.drawerWidth;\n\n    if (this.state.drawerWidth !== drawerWidth) {\n      this.setState({ drawerWidth });\n    }\n  };\n\n  private renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerSidebar\n        screenProps={this.props.screenProps}\n        drawerOpenProgress={progress}\n        navigation={this.props.navigation}\n        descriptors={this.props.descriptors}\n        {...this.props.navigationConfig}\n      />\n    );\n  };\n\n  private renderContent = () => {\n    let { lazy, navigation, detachInactiveScreens = true } = this.props;\n    let { loaded } = this.state;\n    let { routes } = navigation.state;\n\n    if (this.props.navigationConfig.unmountInactiveRoutes) {\n      let activeKey = navigation.state.routes[navigation.state.index].key;\n      let descriptor = this.props.descriptors[activeKey];\n\n      return (\n        <SceneView\n          navigation={descriptor.navigation}\n          screenProps={this.props.screenProps}\n          component={descriptor.getComponent()}\n        />\n      );\n    } else {\n      const enabled = screensEnabled?.() && detachInactiveScreens;\n\n      return (\n        // @ts-ignore\n        <ScreenContainer enabled={enabled} style={styles.content}>\n          {routes.map((route, index) => {\n            if (lazy && !loaded.includes(index)) {\n              // Don't render a screen if we've never navigated to it\n              return null;\n            }\n\n            let isFocused = navigation.state.index === index;\n            let descriptor = this.props.descriptors[route.key];\n\n            return (\n              <ResourceSavingScene\n                key={route.key}\n                style={[\n                  StyleSheet.absoluteFill,\n                  { opacity: isFocused ? 1 : 0 },\n                ]}\n                isVisible={isFocused}\n                enabled={detachInactiveScreens}\n              >\n                <SceneView\n                  navigation={descriptor.navigation}\n                  screenProps={this.props.screenProps}\n                  component={descriptor.getComponent()}\n                />\n              </ResourceSavingScene>\n            );\n          })}\n        </ScreenContainer>\n      );\n    }\n  };\n\n  private setDrawerGestureRef = (ref: PanGestureHandler | null) => {\n    // @ts-ignore\n    this.drawerGestureRef.current = ref;\n  };\n\n  private getDrawerBackgroundColor() {\n    const { drawerBackgroundColor } = this.props.navigationConfig;\n\n    if (drawerBackgroundColor) {\n      return typeof drawerBackgroundColor === 'string'\n        ? drawerBackgroundColor\n        : drawerBackgroundColor[this.context];\n    } else {\n      return ThemeColors[this.context].bodyContent;\n    }\n  }\n\n  private getOverlayColor() {\n    const { overlayColor } = this.props.navigationConfig;\n\n    if (overlayColor) {\n      return typeof overlayColor === 'string'\n        ? overlayColor\n        : overlayColor[this.context];\n    } else {\n      return 'rgba(0,0,0,0.5)';\n    }\n  }\n\n  render() {\n    const { navigation, navigationConfig } = this.props;\n    const {\n      drawerType,\n      sceneContainerStyle,\n      edgeWidth,\n      minSwipeDistance,\n      hideStatusBar,\n      statusBarAnimation,\n      gestureHandlerProps,\n    } = navigationConfig;\n\n    const drawerLockMode = this.getLockMode(this.props);\n    const drawerBackgroundColor = this.getDrawerBackgroundColor();\n    const overlayColor = this.getOverlayColor();\n\n    return (\n      <DrawerGestureContext.Provider value={this.drawerGestureRef}>\n        <Drawer\n          open={navigation.state.isDrawerOpen}\n          gestureEnabled={\n            drawerLockMode !== 'locked-open' &&\n            drawerLockMode !== 'locked-closed'\n          }\n          onOpen={this.handleDrawerOpen}\n          onClose={this.handleDrawerClose}\n          onGestureRef={this.setDrawerGestureRef}\n          gestureHandlerProps={gestureHandlerProps}\n          drawerType={drawerType}\n          drawerPosition={this.props.navigationConfig.drawerPosition}\n          sceneContainerStyle={sceneContainerStyle}\n          drawerStyle={{\n            backgroundColor: drawerBackgroundColor,\n            width: this.state.drawerWidth,\n          }}\n          overlayStyle={{ backgroundColor: overlayColor }}\n          swipeEdgeWidth={edgeWidth}\n          swipeDistanceThreshold={minSwipeDistance}\n          hideStatusBar={hideStatusBar}\n          statusBarAnimation={statusBarAnimation}\n          renderDrawerContent={this.renderNavigationView}\n          renderSceneContent={this.renderContent}\n        />\n      </DrawerGestureContext.Provider>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"],"mappings":"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"}